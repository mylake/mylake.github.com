<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>mylake</title>
    <description></description>
    <link>/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sun, 14 May 2017 16:26:46 +0800</pubDate>
    <lastBuildDate>Sun, 14 May 2017 16:26:46 +0800</lastBuildDate>
    <generator>Jekyll v3.2.0</generator>
    
      <item>
        <title>34</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;“strive 5/6 ~ 5/13”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;use&quot;&gt;Use&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;[gem] &lt;a href=&quot;https://github.com/preston/railroady&quot;&gt;RailRoady&lt;/a&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;RailRoady generates Rails 3/4/5 model (ActiveRecord, Mongoid, Datamapper) and controller UML diagrams as cross-platform .svg files, as well as in the DOT language.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;read&quot;&gt;Read&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;[ruby] &lt;a href=&quot;http://lizabinante.com/blog/creating-a-configurable-ruby-gem/&quot;&gt;Creating a configurable Ruby gem&lt;/a&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;how to create configurable ruby gem&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[conf] &lt;a href=&quot;http://rubykaigi.org/2014/presentation/S-TakumiMiura&quot;&gt; &quot;Gem of this Week&quot; - building culture and making gem&lt;/a&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;let your team members to create the “Gem”s that make work more and more efficient&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[conf] &lt;a href=&quot;http://rubykaigi.org/2014/presentation/S-ZevBlut-KevinGriffin&quot;&gt;7 years of Ruby &amp;amp; Rails with the same web site&lt;/a&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;The code has changed from a single site to multiple sites with a shared core&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[conf] &lt;a href=&quot;http://rubykaigi.org/2014/presentation/S-RichardHuang&quot;&gt;Write ruby code to change ruby code&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[conf] &lt;a href=&quot;http://rubykaigi.org/2015/presentations/prodis&quot;&gt;The worst Ruby codes I've seen in my life'&lt;/a&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;refactor skills&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[conf] &lt;a href=&quot;https://ruby-china.org/topics/31164&quot;&gt;RubyConf China 2016 参会主题心得分享 (含讲稿下载)&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[conf] &lt;a href=&quot;https://speakerdeck.com/zmbacker/da-zao-ruby-kai-fa-tuan-dui-de-hang-mu&quot;&gt;打造 Ruby 开发团队的航母&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[conf] &lt;a href=&quot;https://speakerdeck.com/xiewenwei/ru-he-gei-rails-ying-yong-jian-fei-bo-he-wei-fu-wu-hua-shi-jian&quot;&gt;如何给 Rails 应用减肥 - 薄荷微服务化实践&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[conf] &lt;a href=&quot;http://pragmati.st/assets/managing-unmanageable-complexity-railsconf-2017.pdf&quot;&gt;Managing Unmanageable
Complexity&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[conf] &lt;a href=&quot;https://speakerdeck.com/andrewhao/built-to-last-a-domain-driven-approach-to-beautiful-systems&quot;&gt;Built to Last: A domain-driven approach to beautiful systems&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[conf] &lt;a href=&quot;https://speakerdeck.com/hiimtaylorjones/architecture-the-next-generation-railsconf-2017&quot;&gt;Architecture: The Next Generation&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[conf] &lt;a href=&quot;https://speakerdeck.com/samphippen/teaching-rspec-to-play-nice-with-rails&quot;&gt;Teaching RSpec to play nice with Rails&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[conf] &lt;a href=&quot;https://www.slideshare.net/AlexKitchens/perusing-the-rails-source-code-a-beginners-guide&quot;&gt;Perusing the Rails Source Code&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[conf] &lt;a href=&quot;https://docs.google.com/presentation/d/17riOIVJfdnFp28TGh5VUs7n8AJF9qC0NNsTLlgln30c/edit#slide=id.g1d9b24f0ee_0_157&quot;&gt;The Arcane Art of Error Handling&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[conf] &lt;a href=&quot;https://speakerdeck.com/jessrudder/the-good-bad-bug-learning-to-embrace-mistakes&quot;&gt;The Good Bad Bug: Learning to Embrace Mistakes&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;book&quot;&gt;Book&lt;/h2&gt;

&lt;h2 id=&quot;video&quot;&gt;Video&lt;/h2&gt;

&lt;h2 id=&quot;learn&quot;&gt;Learn&lt;/h2&gt;
</description>
        <pubDate>Sat, 13 May 2017 08:00:00 +0800</pubDate>
        <link>/2017/05/13/1/</link>
        <guid isPermaLink="true">/2017/05/13/1/</guid>
        
        <category>weekly</category>
        
        
      </item>
    
      <item>
        <title>33</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;“strive 4/30 ~ 5/6”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;use&quot;&gt;Use&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;[gem] &lt;a href=&quot;https://github.com/bkeepers/dotenv&quot;&gt;dotenv&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;read&quot;&gt;Read&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;[article] &lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzIzNTI2MDczMQ%3D%3D&amp;amp;mid=2247483989&amp;amp;idx=1&amp;amp;sn=361e927eafe6b153f58894780ab33759&amp;amp;chksm=e8e89c01df9f1517b4084ee0da09965891f79b9f6a2c85ea3b4af71aedde4ee020a4f31d6073&amp;amp;scene=21&amp;amp;utm_content=buffera8dd6&amp;amp;utm_medium=social&amp;amp;utm_source=facebook.com&amp;amp;utm_campaign=buffer#wechat_redirect&quot;&gt;白板面试和程序优化这么火，到底为什么？&lt;/a&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;Software Performance Still Matter&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[ruby] &lt;a href=&quot;https://www.levups.com/en/blog/2017/optimize_ruby_memory_usage_jemalloc_heroku_scalingo.html&quot;&gt;Improve your Ruby application's memory usage and performance with jemalloc&lt;/a&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;For Ruby, using jemalloc allows you to allocate, re-use or release more efficiently the memory of your application.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[architect] &lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5ODYxMDA5OQ==&amp;amp;mid=2651959391&amp;amp;idx=1&amp;amp;sn=fb28fd5e5f0895ddb167406d8a735548&amp;amp;scene=21#wechat_redirect&quot;&gt;秒殺系統架構優化思路&lt;/a&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;將請求盡量攔截在系統上游&lt;/li&gt;
      &lt;li&gt;充分利用緩存&lt;/li&gt;
      &lt;li&gt;瀏覽器端 =&amp;gt; 站點層 =&amp;gt; 服務層 =&amp;gt; 數據層&lt;/li&gt;
      &lt;li&gt;客戶端怎麼優化（瀏覽器層， APP 層）
        &lt;ul&gt;
          &lt;li&gt;產品層面，用戶點擊“查詢”或者“購票”後，按鈕置灰，禁止用戶重複提交請求&lt;/li&gt;
          &lt;li&gt;JS 層面，限制用戶在x 秒之內只能提交一次請求&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;站點層面的請求攔截
        &lt;ul&gt;
          &lt;li&gt;對 uid 進行請求計數和去重, 緩存，頁面緩存，同一個 uid ，限制訪問頻度，做頁面緩存&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;服務層來攔截
        &lt;ul&gt;
          &lt;li&gt;queue&lt;/li&gt;
          &lt;li&gt;分時分段售票&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;數據庫層
        &lt;ul&gt;
          &lt;li&gt;take it easy&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;盡量將請求攔截在系統上游（越上游越好）；&lt;/li&gt;
      &lt;li&gt;讀多寫少的常用多使用緩存（緩存抗讀壓力）；&lt;/li&gt;
      &lt;li&gt;瀏覽器和 APP ：做限速&lt;/li&gt;
      &lt;li&gt;站點層：按照 uid 做限速，做頁面緩存&lt;/li&gt;
      &lt;li&gt;服務層：按照業務做寫請求隊列控制流量，做數據緩存&lt;/li&gt;
      &lt;li&gt;數據層：閑庭信步&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[legacy code] &lt;a href=&quot;http://blog.mz026.rocks/20170501/migrate-legacy-schema&quot;&gt;快樂搬移 Legacy Schema&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[web] &lt;a href=&quot;http://blog.cgmlife.net/posts/2014/11/30/ironman-seventh-it-states-help-30-days-to-learn-web-front-end-performance-optimization&quot;&gt;30 天學會 Web 前端效能優化&lt;/a&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;basic web frontend performance&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;book&quot;&gt;Book&lt;/h2&gt;

&lt;h2 id=&quot;video&quot;&gt;Video&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;[react native] &lt;a href=&quot;https://www.udemy.com/the-complete-react-native-and-redux-course/learn/v4/&quot;&gt;The Complete React Native and Redux Course&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;learn&quot;&gt;Learn&lt;/h2&gt;
</description>
        <pubDate>Sat, 06 May 2017 08:00:00 +0800</pubDate>
        <link>/2017/05/06/1/</link>
        <guid isPermaLink="true">/2017/05/06/1/</guid>
        
        <category>weekly</category>
        
        
      </item>
    
      <item>
        <title>32</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;“strive 4/08 ~ 4/29”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;use&quot;&gt;Use&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;[tool] &lt;a href=&quot;https://chrome.google.com/webstore/detail/boomerang-soap-rest-clien/eipdnjedkpcnlmmdfdkgfpljanehloah?hl=en&quot;&gt;Boomerang, SOAP &amp;amp; REST Client&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[gem] &lt;a href=&quot;https://github.com/inossidabile/wash_out&quot;&gt;WashOut&lt;/a&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;WashOut is a gem that greatly simplifies creation of SOAP service providers.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[gem] &lt;a href=&quot;https://github.com/glebm/rails_email_preview&quot;&gt;rails_email_preview&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;read&quot;&gt;Read&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;[soap] &lt;a href=&quot;http://blog.arkency.com/2016/07/testing-soap-api-adapters/&quot;&gt;Implementing &amp;amp; Testing SOAP API clients in Ruby&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[soap] &lt;a href=&quot;http://blog.johnsonch.com/2013/04/18/rails-3-soap-and-testing-oh-my/&quot;&gt;rails SOAP and Testing&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[ssl] &lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-secure-nginx-with-let-s-encrypt-on-ubuntu-14-04&quot;&gt;How To Secure Nginx with Let's Encrypt on Ubuntu 14.04&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[article] &lt;a href=&quot;http://avdi.org/talks/confident-code-rubymidwest-2011/confident-code.html&quot;&gt;confident-code&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[article] &lt;a href=&quot;https://www.slideshare.net/Brunty/bdd-telling-stories-through-code-for-technotts&quot;&gt;BDD: Telling stories through code&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[article] &lt;a href=&quot;https://www.rubysteps.com/articles/2014/telling-stories-with-code/&quot;&gt;Telling stories with code&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[article] &lt;a href=&quot;https://www.rubysteps.com/articles/2016/the-two-dhh-approved-programming-habits-that-will-make-you-a-good-programmer/&quot;&gt;The two DHH-approved programming habits that will make you a good programmer&lt;/a&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;Read a lot of software, Write a lot of software&lt;/li&gt;
      &lt;li&gt;You’ll gravitate to TDD because you’ve experienced the joy of working with tight feedback loops. You’ll refactor because you’ve identified patterns in your code and want to make them more obvious&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;book&quot;&gt;Book&lt;/h2&gt;

&lt;h2 id=&quot;video&quot;&gt;Video&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;[react native] &lt;a href=&quot;https://www.udemy.com/the-complete-react-native-and-redux-course/learn/v4/&quot;&gt;The Complete React Native and Redux Course&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;learn&quot;&gt;Learn&lt;/h2&gt;
</description>
        <pubDate>Sat, 15 Apr 2017 08:00:00 +0800</pubDate>
        <link>/2017/04/15/1/</link>
        <guid isPermaLink="true">/2017/04/15/1/</guid>
        
        <category>weekly</category>
        
        
      </item>
    
      <item>
        <title>31</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;“strive 4/01 ~ 4/08”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;use&quot;&gt;Use&lt;/h2&gt;

&lt;h2 id=&quot;read&quot;&gt;Read&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;[rails engine] &lt;a href=&quot;https://www.toptal.com/ruby-on-rails/rails-engines-in-the-wild-real-world-examples-of-rails-engines-in-action&quot;&gt;A Guide to Rails Engines in the Wild: Real World Examples of Rails Engines in Action&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[rails engine] &lt;a href=&quot;https://medium.com/ruby-on-rails/patterns-for-successful-rails-engines-a7dae3db6921&quot;&gt;Patterns for Successful Rails Engines&lt;/a&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;Base controller inheritance&lt;/li&gt;
      &lt;li&gt;Extending classes (via class_eval)&lt;/li&gt;
      &lt;li&gt;Extending classes (via acts_as_yourengine)&lt;/li&gt;
      &lt;li&gt;Extending classes (via modules)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[rails engine] &lt;a href=&quot;https://github.com/taskrabbit/rails_engines_example&quot;&gt;Rails 4 Engines, TaskRabbit&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[rails engine] &lt;a href=&quot;https://speakerdeck.com/peakpg/creating-mountable-engines&quot;&gt;Creating Mountable Engines&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[rails engine] &lt;a href=&quot;http://halyph.com/blog/2015/04/04/rails-architecture-and-scalability-issues.html&quot;&gt;Rails Architecture and Scalability&lt;/a&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;Splitting application into small pieces
        &lt;ul&gt;
          &lt;li&gt;Split into smaller applications
            &lt;ul&gt;
              &lt;li&gt;Contains web UI, logic and data
                &lt;ul&gt;
                  &lt;li&gt;Extract look and feel into gem to share across apps&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;May combine with other apps&lt;/li&gt;
              &lt;li&gt;May rely on common libraries&lt;/li&gt;
              &lt;li&gt;Typically run in their own Ruby VM&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;Extract services and create APIs
            &lt;ul&gt;
              &lt;li&gt;Create client API wrapper gems for consumers&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;Extract libraries (gems)
            &lt;ul&gt;
              &lt;li&gt;Create shared based client gem library&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;book&quot;&gt;Book&lt;/h2&gt;

&lt;h2 id=&quot;video&quot;&gt;Video&lt;/h2&gt;

&lt;h2 id=&quot;learn&quot;&gt;Learn&lt;/h2&gt;
</description>
        <pubDate>Sat, 08 Apr 2017 08:00:00 +0800</pubDate>
        <link>/2017/04/08/1/</link>
        <guid isPermaLink="true">/2017/04/08/1/</guid>
        
        <category>weekly</category>
        
        
      </item>
    
      <item>
        <title>30</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;“strive 3/25 ~ 4/01”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;use&quot;&gt;Use&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;[error handling] &lt;a href=&quot;https://rollbar.com/error-tracking/ruby/&quot;&gt;rollbar&lt;/a&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;Ruby error tracking made easy&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[error handling] &lt;a href=&quot;http://docs.honeybadger.io/lib/ruby.html#add-context-data&quot;&gt;honeybadger&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;read&quot;&gt;Read&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;[architect] &lt;a href=&quot;https://www.slideshare.net/kigster/enterprise-architectures-with-ruby-and-rails&quot;&gt;Enterprise Architectures with Ruby (and Rails)&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[pattern] &lt;a href=&quot;https://kknews.cc/zh-tw/other/942xe8.html&quot;&gt;DataMapper vs Active Record&lt;/a&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;應用程式的設計類型
        &lt;ul&gt;
          &lt;li&gt;如果你們的應用程式設計的時候不依賴與資料庫結構 =&amp;gt; DataMapper
它可以很好的控制持久化相關的操作，而且可以把業務規則封裝在實體中。其實你會發現它體現領域驅動設計的模型&lt;/li&gt;
          &lt;li&gt;當你根據資料庫的結構去進行應用程式設計的時候 =&amp;gt; Active Record&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;應用程式的規模
        &lt;ul&gt;
          &lt;li&gt;我們要從一個存在的業務邏輯中去創建一個新的應用程式，那麼我們可以採用Data Mapper模式的ORM
通過Data Mapper模式我們可以通過領域模型去封裝業務規則，讓在應用程式中更清晰更直觀 =&amp;gt; DataMapper&lt;/li&gt;
          &lt;li&gt;一個最小化可行產品(Minimum Viable Product, MVP)產品然後測試和收集用戶的反饋 =&amp;gt; Active Record&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[error handling] &lt;a href=&quot;http://www.mikeperham.com/2013/08/25/please-use-an-error-service/&quot;&gt;Please Use an Error Service!&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[error handling] &lt;a href=&quot;https://www.toptal.com/abap/clean-code-and-the-art-of-exception-handling&quot;&gt;Clean Code and The Art of Exception Handling&lt;/a&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;Always create your own ApplicationError hierarchy&lt;/li&gt;
      &lt;li&gt;Never rescue more exceptions than you need to =&amp;gt; handle most in parent controller&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[error handling] &lt;a href=&quot;http://www.monkeyandcrow.com/blog/reading_rails_handling_exceptions/&quot;&gt;Reading Rails - Handling Exceptions&lt;/a&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;ActiveSupport’s Rescuable module lets us define exception handlers. ActionController’s Rescue middleware catches exceptions, and then tries to handle them.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[error handling] &lt;a href=&quot;http://avdi.org/talks/exceptional-ruby-2011-02-04/&quot;&gt;exceptional-ruby&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[rails engine] &lt;a href=&quot;https://content.pivotal.io/blog/migrating-from-a-single-rails-app-to-a-suite-of-rails-engines&quot;&gt;Migrating from a single Rails app to a suite of Rails engines&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[rails engine] &lt;a href=&quot;https://content.pivotal.io/blog/unbuilt-rails-dependencies-how-to-design-for-loosely-coupled-highly-cohesive-components-within-a-rails-application&quot;&gt;Unbuilt Rails Dependencies: How to design for loosely-coupled, highly-cohesive components within a Rails application&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[rails engine] &lt;a href=&quot;https://content.pivotal.io/blog/rails-contained-a-container-for-web-application-development-and-deployment&quot;&gt;Rails Contained: A Container for Web Application Development and Deployment&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[rails engine] &lt;a href=&quot;https://github.com/JuanitoFatas/Guides/blob/master/guides/edge-translation/engines-zh_TW.md&quot;&gt;Rails Engine guide&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[rails engine] &lt;a href=&quot;https://ruby-china.org/topics/28538&quot;&gt;Rails Breaking Up a Monolithic Rails App Without MicroService&lt;/a&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;share business logic&lt;/li&gt;
      &lt;li&gt;independent deployment&lt;/li&gt;
      &lt;li&gt;no remote call&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[rails engine] &lt;a href=&quot;https://www.embbnux.com/2016/03/15/rails_system_refactor_with_rails_engine/&quot;&gt;重构-基于Rails:Engine的Rails网站系统拆分&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;book&quot;&gt;Book&lt;/h2&gt;

&lt;h2 id=&quot;video&quot;&gt;Video&lt;/h2&gt;

&lt;h2 id=&quot;learn&quot;&gt;Learn&lt;/h2&gt;
</description>
        <pubDate>Sat, 01 Apr 2017 08:00:00 +0800</pubDate>
        <link>/2017/04/01/1/</link>
        <guid isPermaLink="true">/2017/04/01/1/</guid>
        
        <category>weekly</category>
        
        
      </item>
    
      <item>
        <title>29</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;“strive 3/18 ~ 3/25”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;use&quot;&gt;Use&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;[tool] &lt;a href=&quot;http://blog.hsatac.net/2014/10/duplicate-production-requests-for-testing/&quot;&gt;Duplicate Production Requests for Testing&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[gem] &lt;a href=&quot;https://github.com/instructure/switchman&quot;&gt;switchman&lt;/a&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;ActiveRecord extension for sharding your database&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;read&quot;&gt;Read&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;[rails] &lt;a href=&quot;https://blog.codeminer42.com/towards-minimal-idiomatic-and-performant-ruby-code-f3fc6aed3c94#.zgxpdtnvd&quot;&gt;Towards Minimal, Idiomatic, and Performant Ruby Code&lt;/a&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;block is faster than procs
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def each
  return to_enum(__callee__) unless block_given?
  @collection.each { |item| yield item }
end
&lt;/code&gt;&lt;/pre&gt;
            &lt;/div&gt;
            &lt;p&gt;faster than&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def each_block_to_proc(&amp;amp;block)
  @collection.each(&amp;amp;block)
end
&lt;/code&gt;&lt;/pre&gt;
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[aws] &lt;a href=&quot;https://rickhw.github.io/2017/03/02/AWS/Study-Notes-CloudWatch/&quot;&gt;CloudWatch&lt;/a&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;CloudWatch Alarms&lt;/li&gt;
      &lt;li&gt;CloudWatch Events / Rules&lt;/li&gt;
      &lt;li&gt;CloudWatch Logs&lt;/li&gt;
      &lt;li&gt;CloudWatch Metric, Filter&lt;/li&gt;
      &lt;li&gt;CloudWatch Dashboard&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[rails] &lt;a href=&quot;https://robots.thoughtbot.com/slicing-up-rails-application-js-for-faster-load-times&quot;&gt;Slicing up Rails Application.js for Faster Load Times&lt;/a&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;add page-specific JavaScript in Rails&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[basic knowledge] &lt;a href=&quot;https://github.com/alex/what-happens-when&quot;&gt;What happens when you type google.com into your browser's address box and press enter&lt;/a&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;the “g” key is pressed =&amp;gt; the browser receives the event and the entire auto-complete&lt;/li&gt;
      &lt;li&gt;Parse URL, ex: protocol, resource&lt;/li&gt;
      &lt;li&gt;Is it a URL or a search term?&lt;/li&gt;
      &lt;li&gt;Convert non-ASCII Unicode characters in hostname&lt;/li&gt;
      &lt;li&gt;Check HSTS list&lt;/li&gt;
      &lt;li&gt;DNS lookup&lt;/li&gt;
      &lt;li&gt;ARP process&lt;/li&gt;
      &lt;li&gt;Opening of a socket&lt;/li&gt;
      &lt;li&gt;TLS handshake&lt;/li&gt;
      &lt;li&gt;HTTP protocol&lt;/li&gt;
      &lt;li&gt;HTTP Server Request Handle&lt;/li&gt;
      &lt;li&gt;Behind the scenes of the Browser
        &lt;ul&gt;
          &lt;li&gt;HTML parsing&lt;/li&gt;
          &lt;li&gt;CSS interpretation&lt;/li&gt;
          &lt;li&gt;Page Rendering&lt;/li&gt;
          &lt;li&gt;GPU Rendering&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;book&quot;&gt;Book&lt;/h2&gt;

&lt;h2 id=&quot;video&quot;&gt;Video&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;[udemy - react native] &lt;a href=&quot;https://www.udemy.com/the-complete-react-native-and-redux-course/learn/v4/content&quot;&gt;The Complete React Native and Redux Course&lt;/a&gt;&lt;/p&gt;
    &lt;p&gt;## Learn&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 25 Mar 2017 08:00:00 +0800</pubDate>
        <link>/2017/03/25/1/</link>
        <guid isPermaLink="true">/2017/03/25/1/</guid>
        
        <category>weekly</category>
        
        
      </item>
    
      <item>
        <title>28</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;“strive 3/11 ~ 3/18”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;use&quot;&gt;Use&lt;/h2&gt;

&lt;h2 id=&quot;read&quot;&gt;Read&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;[rails] &lt;a href=&quot;http://blog.honeybadger.io/common-rails-idioms-that-kill-database-performance/&quot;&gt;Common Rails Idioms that Kill Database Performance&lt;/a&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;As you start doing more complex queries, it’s a good idea to run them through explain. Do it early and often.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[rails] &lt;a href=&quot;https://www.slideshare.net/fxn/the-rails-boot-process&quot;&gt;rails boot process&lt;/a&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;First Steps
        &lt;ul&gt;
          &lt;li&gt;define load paths for dependencies (Bundle.setup)&lt;/li&gt;
          &lt;li&gt;Load rails/all&lt;/li&gt;
          &lt;li&gt;Load gem dependencies (Bundle.require)&lt;/li&gt;
          &lt;li&gt;Define the application class&lt;/li&gt;
          &lt;li&gt;Rails.application.initialize!&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Rails::Railtie
        &lt;ul&gt;
          &lt;li&gt;Hooks to execute code when the console, runner, etc..&lt;/li&gt;
          &lt;li&gt;Define custom configuration points&lt;/li&gt;
          &lt;li&gt;Declare code to be executed during boot&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Lazy loading
        &lt;ul&gt;
          &lt;li&gt;autoload, on_load&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
module ActiveRecord
class Railtie &amp;lt; Rails::Railtie
  initializer 'active_record.logger' do
    ActiveSupport.on_load(:active_record) do
      self.logger ||= Rails.logger
    end
  end
end
end
&lt;/code&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[rails] &lt;a href=&quot;http://andrewberls.com/blog/post/rails-from-request-to-response-part-1--introduction&quot;&gt;Rails from Request to Response: Part 1 - Introduction&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[rails] &lt;a href=&quot;http://andrewberls.com/blog/post/rails-from-request-to-response-part-2--routing&quot;&gt;Rails from Request to Response: Part 2 - Routing&lt;/a&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;rails/railties/lib/rails/engine.rb&lt;/li&gt;
      &lt;li&gt;rails/actionpack/lib/action_dispatch/routing/route_set.rb&lt;/li&gt;
      &lt;li&gt;rails/actionpack/lib/action_dispatch/journey/router.rb&lt;/li&gt;
      &lt;li&gt;rails/actionpack/lib/action_dispatch/routing/mapper.rb&lt;/li&gt;
      &lt;li&gt;rails/actionpack/lib/action_dispatch/routing/route_set.rb#dispatch
        &lt;ul&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
def dispatch(controller, action, env)
controller.action(action).call(env)
end
&lt;/code&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[rails] &lt;a href=&quot;http://andrewberls.com/blog/post/rails-from-request-to-response-part-3--actioncontroller&quot;&gt;http://andrewberls.com/blog/post/rails-from-request-to-response-part-2--routing&lt;/a&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;controller hierarchy
        &lt;ul&gt;
          &lt;li&gt;YourController « ApplicationController &amp;lt; ActionController::Base &amp;lt; ActionController::Metal &amp;lt; AbstractController::Base&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;rails/actionpack/lib/action_controller/metal.rb
        &lt;ul&gt;
          &lt;li&gt;self.action&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;rails/actionpack/lib/action_controller/metal/rack_delegation.rb
        &lt;ul&gt;
          &lt;li&gt;dispatch&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;rails/actionpack/lib/action_controller/metal.rb
        &lt;ul&gt;
          &lt;li&gt;dispatch&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;rails/actionpack/lib/abstract_controller/base.rb
        &lt;ul&gt;
          &lt;li&gt;process&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;book&quot;&gt;Book&lt;/h2&gt;

&lt;h2 id=&quot;video&quot;&gt;Video&lt;/h2&gt;

&lt;h2 id=&quot;learn&quot;&gt;Learn&lt;/h2&gt;
</description>
        <pubDate>Sat, 18 Mar 2017 08:00:00 +0800</pubDate>
        <link>/2017/03/18/1/</link>
        <guid isPermaLink="true">/2017/03/18/1/</guid>
        
        <category>weekly</category>
        
        
      </item>
    
      <item>
        <title>27</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;“strive 3/04 ~ 3/11”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;use&quot;&gt;Use&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;[gem] &lt;a href=&quot;https://github.com/michaelherold/benchmark-memory&quot;&gt;benchmark-memory&lt;/a&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;benchmark-memory is a tool that helps you to benchmark the memory usage of different pieces of code.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;read&quot;&gt;Read&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;[ssl] &lt;a href=&quot;https://read01.com/yj3B.html&quot;&gt;HTTPS(SSL/TLS) 原理之深入淺出&lt;/a&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;HTTPS 的基本運行過程：
        &lt;ul&gt;
          &lt;li&gt;利用對稱加密算法來加密網頁內容，那麼如何保證對稱加密算法的秘鑰的安全呢？&lt;/li&gt;
          &lt;li&gt;使用非對稱加密算法來獲得對稱加密算法的秘鑰，從而保證了對稱加密算法的秘鑰的安全，也就保證了對稱加密算法的安全&lt;/li&gt;
          &lt;li&gt;如何保證非對稱加密算法公鑰不被篡改？解決方法：將公鑰放在數字證書中。只要證書是可信的，公鑰就是可信的&lt;/li&gt;
          &lt;li&gt;公鑰加密計算量太大，如何減少耗用的時間？解決方法：每一次對話（session），客戶端和伺服器端都生成一個”對話密鑰”（session key），用它來加密信息。由於”對話密鑰”是對稱加密算法，所以運算速度非常快，而伺服器公鑰只用於加密”對話密鑰”本身，這樣就減少了加密運算的消耗時間。&lt;/li&gt;
          &lt;li&gt;SSL/TLS協議的基本過程是這樣的
            &lt;ul&gt;
              &lt;li&gt;客戶端向伺服器端索要並驗證非對稱加密算法的公鑰（handshake）&lt;/li&gt;
              &lt;li&gt;雙方協商生成對稱加密算法的”對話密鑰”（handshake）&lt;/li&gt;
              &lt;li&gt;雙方採用對稱加密算法和它的”對話密鑰”進行加密通信&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;handshake:
            &lt;ul&gt;
              &lt;li&gt;客戶端發出請求（ClientHello）&lt;/li&gt;
              &lt;li&gt;伺服器回應（SeverHello）&lt;/li&gt;
              &lt;li&gt;客戶端回應&lt;/li&gt;
              &lt;li&gt;伺服器的最後回應&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;HTTPS 結合使用了 非對稱加密算法，對稱加密算法，hash算法，分別利用他們的優勢，避免他們的缺點。利用非對稱加密算法獲得對稱加密算法的秘鑰，保證他的安全性；然後實際的網頁內容的加密使用的是對稱加密算法，利用了對稱加密算法速度快的優勢，hash算法主要是防止篡改的發生，是一種校驗機制，最後數字證書，保證了伺服器在將非對稱加密算法的公鑰傳給瀏覽器時的安全性(不會被中間人篡改)，同時也標誌了伺服器的身份&lt;/li&gt;
      &lt;li&gt;HTTPS的本質是什麼？HTTPS的本質就是在HTTP連接發起之前，先使用SSL/TLS協議，協調客戶端和服務端，在兩端各自生產一個對稱加密算法的秘鑰 然後使用普通的HTTP協議傳輸 經過對稱加密算法加密的網頁內容。因為對稱加密算法的秘鑰是安全的，所以對稱加密算法加密的網頁內容也是安全的&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;book&quot;&gt;Book&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;[book] &lt;a href=&quot;https://www.tenlong.com.tw/products/9789862018088&quot;&gt;Implementation Patterns&lt;/a&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;Values
        &lt;ul&gt;
          &lt;li&gt;Communication&lt;/li&gt;
          &lt;li&gt;Simplicity&lt;/li&gt;
          &lt;li&gt;Flexibility&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Principles
        &lt;ul&gt;
          &lt;li&gt;Local Consequences&lt;/li&gt;
          &lt;li&gt;Minimize Repetition&lt;/li&gt;
          &lt;li&gt;Logic and Data Together&lt;/li&gt;
          &lt;li&gt;Symmetry&lt;/li&gt;
          &lt;li&gt;Declarative Expression&lt;/li&gt;
          &lt;li&gt;Rate of Change&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;video&quot;&gt;Video&lt;/h2&gt;

&lt;h2 id=&quot;learn&quot;&gt;Learn&lt;/h2&gt;
</description>
        <pubDate>Sat, 11 Mar 2017 08:00:00 +0800</pubDate>
        <link>/2017/03/11/1/</link>
        <guid isPermaLink="true">/2017/03/11/1/</guid>
        
        <category>weekly</category>
        
        
      </item>
    
      <item>
        <title>26</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;“strive 2/25 ~ 3/04”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;use&quot;&gt;Use&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;[gem] &lt;a href=&quot;https://github.com/cookpad/expeditor&quot;&gt;expeditor&lt;/a&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;Expeditor is a Ruby library that provides asynchronous execution and fault tolerance for microservices.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;read&quot;&gt;Read&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;[rails] &lt;a href=&quot;http://makeiteasy.github.io/2014/10/18/rails-application-booting-process.html&quot;&gt;Rails Application启动流程&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[code] &lt;a href=&quot;https://www.slideshare.net/kylinfish/clean-code-72688451&quot;&gt;無瑕的程式碼 Clean Code 心得分享&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;book&quot;&gt;Book&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;[book] &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/dn568099.aspx&quot;&gt;Cloud Design Patterns&lt;/a&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/dn589799.aspx&quot;&gt;Cache-aside Pattern&lt;/a&gt;&lt;/p&gt;
        &lt;p&gt;Load data on demand into a cache from a data store. This pattern can improve performance and also helps to maintain consistency between data held in the cache and the data in the underlying data store.&lt;/p&gt;
        &lt;ul&gt;
          &lt;li&gt;consider
            &lt;ul&gt;
              &lt;li&gt;Lifetime of Cached Data&lt;/li&gt;
              &lt;li&gt;Evicting Data&lt;/li&gt;
              &lt;li&gt;Priming the Cache&lt;/li&gt;
              &lt;li&gt;Consistency&lt;/li&gt;
              &lt;li&gt;Local (In-Memory) Caching&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/dn589784.aspx&quot;&gt;Circuit Breaker Pattern&lt;/a&gt;&lt;/p&gt;
        &lt;p&gt;Handle faults that may take a variable amount of time to rectify when connecting to a remote service or resource. This pattern can improve the stability and resiliency of an application.&lt;/p&gt;
        &lt;ul&gt;
          &lt;li&gt;consider
            &lt;ul&gt;
              &lt;li&gt;Exception Handling&lt;/li&gt;
              &lt;li&gt;Types of Exceptions&lt;/li&gt;
              &lt;li&gt;Logging&lt;/li&gt;
              &lt;li&gt;Recoverability&lt;/li&gt;
              &lt;li&gt;Testing Failed Operations&lt;/li&gt;
              &lt;li&gt;Manual Override&lt;/li&gt;
              &lt;li&gt;Concurrency&lt;/li&gt;
              &lt;li&gt;Resource Differentiation&lt;/li&gt;
              &lt;li&gt;Accelerated Circuit Breaking&lt;/li&gt;
              &lt;li&gt;Replaying Failed Requests&lt;/li&gt;
              &lt;li&gt;Inappropriate Timeouts on External Services&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;When to Use this Pattern
            &lt;ul&gt;
              &lt;li&gt;To prevent an application from attempting to invoke a remote service or access a shared resource if this operation is highly likely to fail.&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/dn589804.aspx&quot;&gt;Compensating Transaction Pattern&lt;/a&gt;&lt;/p&gt;
        &lt;ul&gt;
          &lt;li&gt;How to handle cancel or exception on a series of steps&lt;/li&gt;
          &lt;li&gt;Undo the work performed by a series of steps, which together define an eventually consistent operation, if one or more of the steps fail.&lt;/li&gt;
          &lt;li&gt;idempotency-patterns&lt;/li&gt;
          &lt;li&gt;When to Use this Pattern
            &lt;ul&gt;
              &lt;li&gt;Use this pattern only for operations that must be undone if they fail. If possible, design solutions to avoid the complexity of requiring compensating transactions&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;video&quot;&gt;Video&lt;/h2&gt;

&lt;h2 id=&quot;learn&quot;&gt;Learn&lt;/h2&gt;
</description>
        <pubDate>Sat, 04 Mar 2017 08:00:00 +0800</pubDate>
        <link>/2017/03/04/1/</link>
        <guid isPermaLink="true">/2017/03/04/1/</guid>
        
        <category>weekly</category>
        
        
      </item>
    
      <item>
        <title>25</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;“strive 2/18 ~ 2/25”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;use&quot;&gt;Use&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;[gem] &lt;a href=&quot;https://github.com/cookpad/expeditor&quot;&gt;expeditor&lt;/a&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;Expeditor is a Ruby library that provides asynchronous execution and fault tolerance for microservices.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;read&quot;&gt;Read&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;[ruby] &lt;a href=&quot;https://www.sitepoint.com/ruby-uses-memory/&quot;&gt;How Ruby Uses Memory&lt;/a&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;Object Retention&lt;/li&gt;
      &lt;li&gt;RUBY_GC_HEAP_GROWTH_FACTOR, ruby will retentino memory&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[ruby] &lt;a href=&quot;http://www.mikeperham.com/2009/05/25/memory-hungry-ruby-daemons/&quot;&gt;Memory-hungry Ruby daemons&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[ruby] &lt;a href=&quot;http://www.rubyenterpriseedition.com/documentation.html#_garbage_collector_performance_tuning&quot;&gt;Garbage collector performance tuning &lt;/a&gt;&lt;p&gt;

&lt;/p&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[api] &lt;a href=&quot;http://taobaofed.org/blog/2017/02/16/a-guide-to-api-design/&quot;&gt;从达标到卓越 —— API 设计之道&lt;/a&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;logic &amp;amp; abstract&lt;/li&gt;
      &lt;li&gt;domain knowledge&lt;/li&gt;
      &lt;li&gt;language sense&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[api] &lt;a href=&quot;https://github.com/lifesinger/blog/issues/164&quot;&gt;Page Visibility 的 API 设计&lt;/a&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;backward compatibility
        &lt;ul&gt;
          &lt;li&gt;document.hidden vs document.visible？&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;scalability&lt;/li&gt;
      &lt;li&gt;consistency&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[api] &lt;a href=&quot;https://github.com/lifesinger/blog/issues/119&quot;&gt;我心目中的优秀 API&lt;/a&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;simple: easy to understand&lt;/li&gt;
      &lt;li&gt;complete: all soluctions on specific domain&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[ruby] &lt;a href=&quot;http://teotti.com/deploy-parts-of-a-ruby-on-rails-application/&quot;&gt;Deploy parts of a Ruby on Rails application&lt;/a&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;how to deploy portions of a Ruby on Rails application to separate servers with the use of Ruby Gems and Rails Engines&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[ruby] &lt;a href=&quot;http://teotti.com/reduce-memory-footprint-requiring-portions-of-your-component-based-rails-applications/&quot;&gt;Reduce memory footprint requiring portions of your component based Rails application with Bundler&lt;/a&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;you can require only the necessary portion to reduce memory usage and speed up the bundling process&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[bundler] &lt;a href=&quot;http://myronmars.to/n/dev-blog/2012/12/5-reasons-to-avoid-bundler-require&quot;&gt;5 Reasons to Avoid Bundler.require&lt;/a&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Bundler.require&lt;/code&gt; is a shortcut for people who can’t (or don’t want to) write their own requires.&lt;/li&gt;
      &lt;li&gt;DHH: Not having to manually track your dependencies feels liberating. Like not having to track memory allocation by hand.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;book&quot;&gt;Book&lt;/h2&gt;

&lt;h2 id=&quot;video&quot;&gt;Video&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;[learn] &lt;a href=&quot;https://simpleprogrammer.com/products/learn-anything/&quot;&gt;10 steps to learn anything quickly&lt;/a&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;ol&gt;
          &lt;li&gt;get the big picture
            &lt;ul&gt;
              &lt;li&gt;high level topic you want to learn&lt;/li&gt;
              &lt;li&gt;break high level topic up into smaller subtopics&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;ol&gt;
          &lt;li&gt;determine the scope
            &lt;ul&gt;
              &lt;li&gt;what subtopic do you want to learn&lt;/li&gt;
              &lt;li&gt;what do you plan on doing with the knowledge you will get from learning about the topic&lt;/li&gt;
              &lt;li&gt;what time frame do you expect to learn&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;ol&gt;
          &lt;li&gt;define success
            &lt;ul&gt;
              &lt;li&gt;what specific actions could I do when I got the knowledge&lt;/li&gt;
              &lt;li&gt;which specific action are the most valuable for me&lt;/li&gt;
              &lt;li&gt;make success criteria measurable&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;ol&gt;
          &lt;li&gt;find resources
            &lt;ul&gt;
              &lt;li&gt;start with books, list the best 5 books on your topic and list them&lt;/li&gt;
              &lt;li&gt;list all the other resources you can think of (blog, internet articles)&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;ol&gt;
          &lt;li&gt;create a learning plan
            &lt;ul&gt;
              &lt;li&gt;list best 5 resource and list the chapters of them&lt;/li&gt;
              &lt;li&gt;which repeated the most&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;ol&gt;
          &lt;li&gt;filter resources
            &lt;ul&gt;
              &lt;li&gt;what criteria do you think is the most important for judging the resources you will use for learning&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;ol&gt;
          &lt;li&gt;learn enough to get started
            &lt;ul&gt;
              &lt;li&gt;waht is the gereral idea of this module in your learning plan&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;ol&gt;
          &lt;li&gt;play around
            &lt;ul&gt;
              &lt;li&gt;what can you do to ‘play around’ with the subject you are learning about&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;ol&gt;
          &lt;li&gt;learn enough to do something useful
            &lt;ul&gt;
              &lt;li&gt;what are the most important questions you hope to find answers to during this step&lt;/li&gt;
              &lt;li&gt;what questions are still unanswered after completing this step&lt;/li&gt;
              &lt;li&gt;what do you think would be an effective way to teach what you have larned in this step&lt;/li&gt;
              &lt;li&gt;what is the most important thing you have larned in this step&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;ol&gt;
          &lt;li&gt;teach
            &lt;ul&gt;
              &lt;li&gt;what do you think would be the best way to present the material you have larned&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;learn&quot;&gt;Learn&lt;/h2&gt;
</description>
        <pubDate>Sat, 25 Feb 2017 08:00:00 +0800</pubDate>
        <link>/2017/02/25/1/</link>
        <guid isPermaLink="true">/2017/02/25/1/</guid>
        
        <category>weekly</category>
        
        
      </item>
    
  </channel>
</rss>
