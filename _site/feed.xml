<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>mylake</title>
    <description></description>
    <link>/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sun, 21 Aug 2016 17:00:09 +0800</pubDate>
    <lastBuildDate>Sun, 21 Aug 2016 17:00:09 +0800</lastBuildDate>
    <generator>Jekyll v3.2.0</generator>
    
      <item>
        <title>3</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;“strive 8/13 ~ 8/20”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;use&quot;&gt;Use&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;[NPM] &lt;a href=&quot;https://github.com/mulesoft/api-designer&quot;&gt;API Designer&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[Gem] &lt;a href=&quot;https://github.com/rails/jbuilder&quot;&gt;jbuilder&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;read&quot;&gt;Read&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;[AWS] &lt;a href=&quot;http://blog.yslin.tw/2014/02/aws-vpc.html&quot;&gt;vpc aws&lt;/a&gt;&lt;/p&gt;
    &lt;ol&gt;
      &lt;li&gt;&lt;a href=&quot;https://blog.clifflu.net/blog/2013/08/%E8%BF%91%E6%B3%81-%E4%B8%80%E9%BB%9E-aws-vpc-%E5%B0%8F%E5%BF%83%E5%BE%97/&quot;&gt;vpc aws2&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[API] &lt;a href=&quot;http://raml.org/developers/raml-100-tutorial#step-introduction&quot;&gt;raml introduction&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[code] &lt;a href=&quot;https://buzzorange.com/techorange/2016/08/16/airbnb-code-review/&quot;&gt;Airbnb 資深工程師分享：怎樣才是正確、有效的 code review&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;book&quot;&gt;Book&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt; &lt;a href=&quot;http://www.mohitsharma.net/sites/default/files/Rails.AntiPatterns.pdf&quot;&gt;Rails.AntiPatterns&lt;/a&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Model
        &lt;ul&gt;
          &lt;li&gt;AntiPattern: Voyeuristic Models
            &lt;ul&gt;
              &lt;li&gt;follow the Law of Demeter
                &lt;ul&gt;
                  &lt;li&gt;In Rails, this could be summed up as “use only one dot.” =&amp;gt; class-level delegate method, This method provides a shortcut fondicating that one or more methods that will be created on your object are actually provided by a related objectr&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;Push All find() calls into finder on the model
                &lt;ul&gt;
                  &lt;li&gt;use scoped&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;keep finders on their own model&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;AntiPattern: Fat Models
            &lt;ul&gt;
              &lt;li&gt;delegate responsibility to new classes
                &lt;ul&gt;
                  &lt;li&gt;composed_of&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;make use of modules&lt;/li&gt;
              &lt;li&gt;reduce the size of large transaction blocks
                &lt;ul&gt;
                  &lt;li&gt;callback, nested attributes&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;AntiPattern: spaghetti SQL
            &lt;ul&gt;
              &lt;li&gt;use your ActiveRecord associations and finders effectively
                &lt;ul&gt;
                  &lt;li&gt;as much as possible using sql on own model, others use association to handle it&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;leanr and love the scope method&lt;/li&gt;
              &lt;li&gt;use a full-text search engine&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;AntiPattern: duplicate code duplication
            &lt;ul&gt;
              &lt;li&gt;extract into module
                &lt;ul&gt;
                  &lt;li&gt;template pattarn =&amp;gt; use module, and some must implement method =&amp;gt; define and execute a class that is missing implementations of template methods&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;write a plugin&lt;/li&gt;
              &lt;li&gt;metaprograming&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Domain Modeling
        &lt;ul&gt;
          &lt;li&gt;AntiPattern: authorization astronaut
            &lt;ul&gt;
              &lt;li&gt;simplify with simple flags&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;AntiPattern: the million-model march
            &lt;ul&gt;
              &lt;li&gt;denormalize into text fields
                &lt;ul&gt;
                  &lt;li&gt;when model have the column like state, and need have some method to check state value =&amp;gt; use meta-programing to define_method “#{state}?”&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;make use of rails serialization
                &lt;ul&gt;
                  &lt;li&gt;save in hash&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Views
        &lt;ul&gt;
          &lt;li&gt;AntiPattern: PHPitis
            &lt;ul&gt;
              &lt;li&gt;learn about the view helpers that come with rails&lt;/li&gt;
              &lt;li&gt;add useful accessors to your models&lt;/li&gt;
              &lt;li&gt;extract into custom helpers&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;AntiPattern: Markup Mayhem
            &lt;ul&gt;
              &lt;li&gt;make use of the rails helpers&lt;/li&gt;
              &lt;li&gt;use haml&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Controllers
        &lt;ul&gt;
          &lt;li&gt;AntiPattern: Homemade Keys
            &lt;ul&gt;
              &lt;li&gt;use clearance&lt;/li&gt;
              &lt;li&gt;use authlogic&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;AntiPattern: Fat Controller
            &lt;ul&gt;
              &lt;li&gt;use active record callbacks and setters
                &lt;ul&gt;
                  &lt;li&gt;default values =&amp;gt; on migration&lt;/li&gt;
                  &lt;li&gt;effective callback use&lt;/li&gt;
                  &lt;li&gt;identification of unnecessary code&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;move to a presenter&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;AntiPattern: Bloated Sessions
            &lt;ul&gt;
              &lt;li&gt;store references instead of instances&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;AntiPattern: Monolithic Controllers
            &lt;ul&gt;
              &lt;li&gt;embrace REST&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;AntiPattern: Controller of Many Faces
            &lt;ul&gt;
              &lt;li&gt;refactor non-restful actions into a separate controller&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;AntiPattern: A Lost Child Controller
            &lt;ul&gt;
              &lt;li&gt;make use of nested resources&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;AntiPattern: Rat’s Nest Resources
            &lt;ul&gt;
              &lt;li&gt;use separate controllers for each nesting&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;AntiPattern: Evil Twin Controllers
            &lt;ul&gt;
              &lt;li&gt;use rails 3 responders&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Services
        &lt;ul&gt;
          &lt;li&gt;AntiPattern: Fire and Forget
            &lt;ul&gt;
              &lt;li&gt;konw what exceptions to look out for&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;AntiPattern: Sluggish Services
            &lt;ul&gt;
              &lt;li&gt;move the task to the background&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;AntiPattern: Pitiful Page Parsing
            &lt;ul&gt;
              &lt;li&gt;use a gem =&amp;gt; nokogiri&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;AntiPattern: Successful Failure
            &lt;ul&gt;
              &lt;li&gt;obey the http codes&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;AntiPattern: Kraken Code Base
            &lt;ul&gt;
              &lt;li&gt;divide into confederated applications&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Using Third-Party Code&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;AntiPattern: Recutting the Gem
            &lt;ul&gt;
              &lt;li&gt;look for a gem first&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;AntiPattern: Amateur Gemologist
            &lt;ul&gt;
              &lt;li&gt;follow TAM (tests, activity, maturity)&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;AntiPattern: Vendor Junk Drawer
            &lt;ul&gt;
              &lt;li&gt;prune irrelevant or unused gems&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;AntiPattern: Miscreant Modification
            &lt;ul&gt;
              &lt;li&gt;consider vendored code sacrosanct&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Testing&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;AntiPattern: Fixture Blues
            &lt;ul&gt;
              &lt;li&gt;make use of factories&lt;/li&gt;
              &lt;li&gt;refactor into contexts&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;AntiPattern: Lost in Isolation
            &lt;ul&gt;
              &lt;li&gt;watch your integration points&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;AntiPattern: Mock Suffocation
            &lt;ul&gt;
              &lt;li&gt;tell, don’t ask&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;AntiPattern: Untested Rake
            &lt;ul&gt;
              &lt;li&gt;extract to a class method&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;AntiPattern: Unprotexted Jewels
            &lt;ul&gt;
              &lt;li&gt;write normal unit tests without rails&lt;/li&gt;
              &lt;li&gt;load only the parts of rails you need&lt;/li&gt;
              &lt;li&gt;brake out the atom bomb&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Scaling and Deploying
        &lt;ul&gt;
          &lt;li&gt;AntiPattern: Scaling Roadblocks
            &lt;ul&gt;
              &lt;li&gt;build to scale from the start&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Databases
        &lt;ul&gt;
          &lt;li&gt;AntiPattern: Disappearing Assets
            &lt;ul&gt;
              &lt;li&gt;make use of the system directory&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;AntiPattern: Sluggish SQL
            &lt;ul&gt;
              &lt;li&gt;add indexes&lt;/li&gt;
              &lt;li&gt;reassess your domain model&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;AntiPattern: Painful Performance
            &lt;ul&gt;
              &lt;li&gt;don’t do inruby what you can do in sql&lt;/li&gt;
              &lt;li&gt;move processing into background jobs&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;AntiPattern: Messy Migrations
            &lt;ul&gt;
              &lt;li&gt;never modify the up method on a committed migration&lt;/li&gt;
              &lt;li&gt;never use external code in a migration&lt;/li&gt;
              &lt;li&gt;always provide a down method in migrations&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;AntiPattern: Wet Validations
            &lt;ul&gt;
              &lt;li&gt;eschew constraints in the database&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Building for Failure&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;AntiPattern: Continual Catastrophe
            &lt;ul&gt;
              &lt;li&gt;fail fast&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;AntiPattern: Unaudible Failures
            &lt;ul&gt;
              &lt;li&gt;never fail quietly&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 20 Aug 2016 08:00:00 +0800</pubDate>
        <link>/2016/08/20/1/</link>
        <guid isPermaLink="true">/2016/08/20/1/</guid>
        
        <category>weekly</category>
        
        
      </item>
    
      <item>
        <title>2</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;“strive 8/7 ~ 8/13”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;use&quot;&gt;Use&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;[Gem] &lt;a href=&quot;https://github.com/solnic/virtus&quot;&gt;virtus&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[Gem] &lt;a href=&quot;https://github.com/NoamB/sorcery&quot;&gt;sorcery&lt;/a&gt;&lt;/p&gt;
    &lt;ol&gt;
      &lt;li&gt;authentication for Rails&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[Gem] &lt;a href=&quot;https://github.com/thoughtbot/capybara-webkit&quot;&gt;capybara-webkit&lt;/a&gt;&lt;/p&gt;
    &lt;ol&gt;
      &lt;li&gt;A Capybara driver for headless WebKit to test JavaScript web apps&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[Gem] &lt;a href=&quot;https://github.com/jnicklas/capybara&quot;&gt;capybara&lt;/a&gt;&lt;/p&gt;
    &lt;ol&gt;
      &lt;li&gt;Acceptance test framework for web applications&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[Gem] &lt;a href=&quot;https://github.com/DatabaseCleaner/database_cleaner&quot;&gt;database_cleaner&lt;/a&gt;&lt;/p&gt;
    &lt;ol&gt;
      &lt;li&gt;Strategies for cleaning databases&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[Gem] &lt;a href=&quot;https://github.com/jpignata/temping&quot;&gt;temping&lt;/a&gt;&lt;/p&gt;
    &lt;ol&gt;
      &lt;li&gt;model mockup, dynamic create db table for model test&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[Gem] &lt;a href=&quot;https://github.com/whitesmith/rubycritic&quot;&gt;rubycritic&lt;/a&gt;&lt;/p&gt;
    &lt;ol&gt;
      &lt;li&gt;provide a quality report of your Ruby code.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[Gem] &lt;a href=&quot;https://github.com/kakas/CapistranoDeployTest&quot;&gt;CapistranoDeployTest&lt;/a&gt;&lt;/p&gt;
    &lt;ol&gt;
      &lt;li&gt;Deploying a Rails App on Ubuntu 14.04 with Capistrano, Nginx, and Puma&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[Gem] &lt;a href=&quot;https://github.com/kpumuk/meta-tags&quot;&gt;meta-tags&lt;/a&gt;&lt;/p&gt;
    &lt;ol&gt;
      &lt;li&gt;make your Rails application SEO-friendly&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[Gem] &lt;a href=&quot;https://github.com/norman/friendly_id&quot;&gt;friendly_id&lt;/a&gt;&lt;/p&gt;
    &lt;ol&gt;
      &lt;li&gt;for pretty url&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[Gem] &lt;a href=&quot;https://github.com/kjvarga/sitemap_generator&quot;&gt;sitemap_generator&lt;/a&gt;&lt;/p&gt;
    &lt;ol&gt;
      &lt;li&gt;create sitemap&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[SEO] &lt;a href=&quot;http://www.browseo.net/&quot;&gt;BROWSEO&lt;/a&gt;&lt;/p&gt;
    &lt;ol&gt;
      &lt;li&gt;see how search engine read your website&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[Gem] &lt;a href=&quot;https://github.com/pat/thinking-sphinx&quot;&gt;sphinx&lt;/a&gt;&lt;/p&gt;
    &lt;ol&gt;
      &lt;li&gt;full-text search engine&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;read&quot;&gt;Read&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;[Ruby] &lt;a href=&quot;http://api.rubyonrails.org/v4.1.4/classes/ActionController/Metal.html#method-i-performed-3F&quot;&gt;ActionController::Metal#performed?&lt;/a&gt;&lt;/p&gt;
    &lt;ol&gt;
      &lt;li&gt;you can test whether render or redirect already happended&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[Ruby] &lt;a href=&quot;http://api.rubyonrails.org/classes/ActiveModel/Validations.html#method-i-valid-3F&quot;&gt;ActiveModel::Validations#valid?(context=nil)&lt;/a&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;validates_length_of :slug, minimum: 3, on: :user&lt;/li&gt;
      &lt;li&gt;validates_length_of :slug, minimum: 1, on: :admin&lt;/li&gt;
      &lt;li&gt;@user.save(context: :admin), @user.valid?(:admin), @user.valid?(:user),&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[Ruby] &lt;a href=&quot;http://railsfun.tw/t/ruby-queue-v-s-thread-mutex/619/2&quot;&gt;[ruby 的多工]Queue v.s. Thread ? &amp;amp; Mutex …&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[Ruby] &lt;a href=&quot;http://blog.codeclimate.com/blog/2012/10/17/7-ways-to-decompose-fat-activerecord-models/&quot;&gt;7-ways-to-decompose-fat-activerecord-models&lt;/a&gt;&lt;/p&gt;
    &lt;ol&gt;
      &lt;li&gt;Value Objects: define domain-specific Value Objects,  Value Objects are great when you have an attribute or small group of attributes that have logic associated with them&lt;/li&gt;
      &lt;li&gt;Service Objects: action is complex,  action reaches across multiple models, action interacts with an external service, action is not a core concern of the underlying model&lt;/li&gt;
      &lt;li&gt;Form Objects: Virtus, When multiple ActiveRecord models might be updated by a single form submission, a Form Object can encapsulate the aggregation&lt;/li&gt;
      &lt;li&gt;Query Objects: For complex SQL queries littering the definition of your ActiveRecord subclass&lt;/li&gt;
      &lt;li&gt;View Objects: If logic is needed purely for display purposes, it does not belong in the model.&lt;/li&gt;
      &lt;li&gt;Policy Objects: Sometimes complex read operations might deserve their own objects
    * “Service Object” for write operations and “Policy Object” for reads, Query Objects focus on executing SQL to return a result set&lt;/li&gt;
      &lt;li&gt;Decorators: For cases where callback logic only needs to run in some circumstances or including it in the model would give the model too many responsibilities, a Decorator is useful&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[CI] &lt;a href=&quot;https://circleci.com/docs/parallel-manual-setup/&quot;&gt;circle parallel-manual-setup&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[API] &lt;a href=&quot;http://apionrails.icalialabs.com/book/chapter_five&quot;&gt;api on rails, Authenticating users&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[Ruby] &lt;a href=&quot;http://www.virtuouscode.com/2012/08/31/configuring-database_cleaner-with-rails-rspec-capybara-and-selenium/&quot;&gt;Configuring database_cleaner with Rails, RSpec, Capybara, and Selenium&lt;/a&gt;&lt;/p&gt;
    &lt;ol&gt;
      &lt;li&gt;different cleaner strategy settings&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[Ruby] routing constraints &lt;/p&gt;
    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;[Ruby] &lt;a href=&quot;http://blog.arkency.com/2014/01/short-urls-for-every-route-in-your-rails-app/&quot;&gt;Pretty, short urls for every route in your Rails app&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;[Ruby] &lt;a href=&quot;https://8thlight.com/blog/ben-voss/2013/01/12/how-to-use-rails-route-constraints.html&quot;&gt;How to use rails routing constraints&lt;/a&gt;&lt;/p&gt;
        &lt;ul&gt;
          &lt;li&gt;security vulnerabilities and data type validation&lt;/li&gt;
          &lt;li&gt;encapsulate and simplify actions (and supporting code)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;[Ruby] &lt;a href=&quot;https://www.viget.com/articles/using-routing-constraints-to-root-your-app&quot;&gt;Using Routing Constraints to Root Your App&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[Ruby] &lt;a href=&quot;https://ruby-china.org/topics/30233&quot;&gt;use_transactional_fixtures vs database_cleaner&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[Ruby] &lt;a href=&quot;http://api.rubyonrails.org/classes/ActiveRecord/Aggregations/ClassMethods.html&quot;&gt;composed_of&lt;/a&gt;&lt;/p&gt;
    &lt;ol&gt;
      &lt;li&gt;model representing attributes as value objects&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[SEO] &lt;a href=&quot;http://gogojimmy.net/2013/09/26/basic-seo-for-rails-developer/&quot;&gt;給 Rails Developer 的基本SEO&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;book&quot;&gt;Book&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt; &lt;a href=&quot;http://openhome.cc/Gossip/CodeData/EssentialJavaScript/index.html&quot;&gt;JavaScript 語言核心&lt;/a&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;done (1), (2)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt; &lt;a href=&quot;https://gumroad.com/l/ios-on-rails&quot;&gt;ios on rails&lt;/a&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;rails api design&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt; &lt;a href=&quot;http://rails-refactoring.com/&quot;&gt;Fearless Rails Refactoring&lt;/a&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Refactoring recipes&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;Inline controller filters
            &lt;ul&gt;
              &lt;li&gt;extract filter to service&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;Explicitly render views with locals
            &lt;ul&gt;
              &lt;li&gt;pass the params to partials explicitly with render&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;Extract render/redirect methods
            &lt;ul&gt;
              &lt;li&gt;extract a private method for each render and redirect call&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;Extract a Single Action Controller class
            &lt;ul&gt;
              &lt;li&gt;extract like CreateProductsController only when ProductsController is too too too large&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;Extract routing constraint
            &lt;ul&gt;
              &lt;li&gt;use routing constraint to seperate controller action&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;Extract an adapter object
            &lt;ul&gt;
              &lt;li&gt;extract call external library to adapter object call&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;Extract a repository object
            &lt;ul&gt;
              &lt;li&gt;hide the direct ActiveRecord calls, isolated, add data storage on repo object&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;Extract a service object using the SimpleDelegator
            &lt;ul&gt;
              &lt;li&gt;move some domain or business logic to service object&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;Extract conditional validation into Service Object
            &lt;ul&gt;
              &lt;li&gt;when validation only used in one place, drop the condition on model, move it to service object&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;Extract a form object
            &lt;ul&gt;
              &lt;li&gt;move form to form object, more explicit and domain is expressed better&lt;/li&gt;
              &lt;li&gt;form object can’t have save method (SRP), Persistence is a seperate concern and different object should take care of it, form object only valid data&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Patterns&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;Instantiating service objects
*&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;The repository pattern
*&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;Wrap external API with an adapter
            &lt;ul&gt;
              &lt;li&gt;isolated our interface from the implementation&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;4 ways to early return from a rails controller&lt;/p&gt;

            &lt;ul&gt;
              &lt;li&gt;extracted_method; return if performed?&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;Service::Input
*&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;Validations: Contexts
*&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;Validations: Objectify
*&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Related topics&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;Service controller communication
            &lt;ul&gt;
              &lt;li&gt;True/false; return the object created/updated; return a response object that contains all the data and/or errors;&lt;/li&gt;
              &lt;li&gt;carry data through exceptions; controller passes callback methods;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;Where to keep services
            &lt;ul&gt;
              &lt;li&gt;group your services according to the feature and then surround them with proper namespace&lt;/li&gt;
              &lt;li&gt;ex: Reporting::MonthlyReport, Forum::CreateNewTopic, TimeTracking::LogTimeService&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;Routing constraints
            &lt;ul&gt;
              &lt;li&gt;use routing constraints for situations where you need to choose differentctions based on some params&lt;/li&gt;
              &lt;li&gt;This makes the controller thinner and it’s more explicit what actios happening&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 13 Aug 2016 08:00:00 +0800</pubDate>
        <link>/2016/08/13/1/</link>
        <guid isPermaLink="true">/2016/08/13/1/</guid>
        
        <category>weekly</category>
        
        
      </item>
    
      <item>
        <title>1</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;“strive 7/31 ~ 8/6”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;use&quot;&gt;Use&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;[Gem] &lt;a href=&quot;https://github.com/vcr/vcr&quot;&gt;vcr&lt;/a&gt;&lt;/p&gt;
    &lt;ol&gt;
      &lt;li&gt;For test, it could record real third party response to yml file&lt;/li&gt;
      &lt;li&gt;Use it with webmock’s body&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[Gem] &lt;a href=&quot;https://github.com/bblimke/webmock&quot;&gt;webmock&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[Gem] &lt;a href=&quot;https://github.com/bbatsov/rubocop&quot;&gt;rubocop&lt;/a&gt;&lt;/p&gt;
    &lt;ol&gt;
      &lt;li&gt;rubocop –auto-correct&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[Gem] &lt;a href=&quot;https://github.com/bblimke/webmock&quot;&gt;webmock&lt;/a&gt;&lt;/p&gt;
    &lt;ol&gt;
      &lt;li&gt;If you use multiple sidekiq processes then you can specify limits per process&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[Gem] &lt;a href=&quot;https://github.com/laserlemon/figaro&quot;&gt;figaro&lt;/a&gt;&lt;/p&gt;
    &lt;ol&gt;
      &lt;li&gt;Figaro was written to make it easy to securely configure Rails applications.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[Gem] &lt;a href=&quot;https://github.com/swipely/docker-api&quot;&gt;docker-api&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[Gem] &lt;a href=&quot;https://github.com/makandra/active_type&quot;&gt;active_type&lt;/a&gt;&lt;/p&gt;
    &lt;ol&gt;
      &lt;li&gt;ActiveType is our take on “presenter models” (or “form models”) in Rails. We want to have controllers (and forms) talk to models that are either not backed by a database table&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[Gem] &lt;a href=&quot;https://github.com/rogercampos/png_quantizator/blob/master/lib/png_quantizator.rb&quot;&gt;png_quantizator&lt;/a&gt;&lt;/p&gt;
    &lt;ol&gt;
      &lt;li&gt;PngQuantizator is a little wrapper around pngquant&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;read&quot;&gt;Read&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;[Ruby] &lt;a href=&quot;https://twin.github.io/partial-downloads-with-enumerators-and-fibers/&quot;&gt;Partial Downloads with Enumerators and Fibers&lt;/a&gt;&lt;/p&gt;
    &lt;ol&gt;
      &lt;li&gt;before download, need to verify MIME type&lt;/li&gt;
      &lt;li&gt;use Enumerators and Fiber to execute streaming downlaod&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[Ruby] &lt;a href=&quot;http://rubyonrails.org/doctrine/&quot;&gt;Ruby on Rails 基本主義en&lt;/a&gt;&lt;/p&gt;
    &lt;ol&gt;
      &lt;li&gt;&lt;a href=&quot;https://medium.com/@juanitofatas/ruby-on-rails-%E5%9F%BA%E6%9C%AC%E4%B8%BB%E7%BE%A9-f4cde39292a4#.niv2du20a&quot;&gt;Ruby on Rails 基本主義 chinese&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[Ruby] &lt;a href=&quot;http://rosenfeld.herokuapp.com/en/articles/ruby-rails/2016-07-18-a-review-of-code-reloaders-for-ruby&quot;&gt;A Review of Code Reloaders for Ruby&lt;/a&gt;&lt;/p&gt;
    &lt;ol&gt;
      &lt;li&gt;Different Code Reloaders&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[Ruby] &lt;a href=&quot;https://medium.com/@Sudhagar/rbenv-how-it-works-e5a0e4fa6e76#.jw3xeqqn9&quot;&gt;Rbenv — How it works&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[Ruby] &lt;a href=&quot;https://infinum.co/the-capsized-eight/articles/hiding-secrets-in-vault&quot;&gt;Hiding secrets in a Vault&lt;/a&gt;&lt;/p&gt;
    &lt;ol&gt;
      &lt;li&gt;Using Vault, Github authentication and ‘secrets’ gem to make secret files more secure.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[Ruby] &lt;a href=&quot;https://blog.blockscore.com/new-features-in-ruby-2-4/&quot;&gt;New Features in Ruby 2.4&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[Ruby] &lt;a href=&quot;https://www.sitepoint.com/automate-docker-with-the-remote-api-and-ruby/&quot;&gt;Automate Docker with the Remote API and Ruby&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[Ruby] &lt;a href=&quot;http://blog.arkency.com/2016/07/respond-to-format-is-useful-even-without-multiple-formats/&quot;&gt;respond_to |format| is useful even without multiple formats&lt;/a&gt;&lt;/p&gt;
    &lt;ol&gt;
      &lt;li&gt;benefit of respond_to&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[Ruby] &lt;a href=&quot;http://aspiringwebdev.com/consider-turbolinks-5-for-your-next-rails-project/&quot;&gt;CONSIDER TURBOLINKS 5 FOR YOUR NEXT RAILS PROJECT&lt;/a&gt;&lt;/p&gt;
    &lt;ol&gt;
      &lt;li&gt;Turbolinks 5 is a library for web applications that makes pages load faster&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[Rspec] &lt;a href=&quot;https://www.relishapp.com/rspec/rspec-core/docs/metadata/described-class&quot;&gt;rspec described_class&lt;/a&gt;&lt;/p&gt;
    &lt;ol&gt;
      &lt;li&gt;If the first argument to the outermost example group is a class, the class is
exposed to each example via the described_class() method&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[Ruby] &lt;a href=&quot;http://apidock.com/rails/ActiveSupport/Callbacks/run_callbacks&quot;&gt;run_callbacks&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[Ruby] &lt;a href=&quot;http://www.justinweiss.com/articles/the-lesser-known-features-in-rails-4-dot-2/&quot;&gt;http://www.justinweiss.com/articles/the-lesser-known-features-in-rails-4-dot-2/&lt;/a&gt;&lt;/p&gt;
    &lt;ol&gt;
      &lt;li&gt;Easily load config files =&amp;gt; Rails.application.config_for(‘yml file name’)&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[Ruby] &lt;a href=&quot;https://speakerdeck.com/a_matsuda/the-recipe-for-the-worlds-largest-rails-monolith&quot;&gt;The Recipe for the World's Largest Rails Monolith&lt;/a&gt;&lt;/p&gt;
    &lt;ol&gt;
      &lt;li&gt;Many handmade tools&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[Ruby] &lt;a href=&quot;https://ruby-china.org/topics/9271&quot;&gt;RSpec 中let 和subject 的區別是什麼？&lt;/a&gt;&lt;/p&gt;
    &lt;ol&gt;
      &lt;li&gt;主要語意的差別, subject主角, let配角&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;book&quot;&gt;Book&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt; &lt;a href=&quot;http://www.books.com.tw/products/CN11096287&quot;&gt;設計模式之禪 第2版&lt;/a&gt;&lt;/p&gt;
    &lt;p&gt;on page 286&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt; &lt;a href=&quot;http://designpatternsinruby.com/&quot;&gt;Design Patterns in Ruby&lt;/a&gt;&lt;/p&gt;
    &lt;p&gt;on page 172&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt; &lt;a href=&quot;https://leanpub.com/growing-rails&quot;&gt;growing-rails&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;work-design&quot;&gt;Work design&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h3 id=&quot;api-architecture&quot;&gt;API Architecture&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;design&quot;&gt;Design&lt;/h4&gt;

    &lt;ol&gt;
      &lt;li&gt;&lt;strong&gt;client auth&lt;/strong&gt;: follow aws, use current timestamp + private key as checksum, server need to verify checksum, also need to make sure timestamp in some duration (like 10 mins)&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;user auth&lt;/strong&gt;: logined user will have one or more token. use token as key, value is user id, and set expired time on every token, save them on redis, so when client send token, server could know the current user.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;error handler&lt;/strong&gt;:
        &lt;ul&gt;
          &lt;li&gt;one config, record key, status code of error, error message use key for i18n.&lt;/li&gt;
          &lt;li&gt;every api action has its service object, when render api error will raise specific exception class and error key,this exception will rescue from base controller, and according error key to error render. All the data format will be the same, the different are message, key, status code&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;– learned from MarsZ&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;implement&quot;&gt;Implement&lt;/h4&gt;

    &lt;ol&gt;
      &lt;li&gt;controller only handle flow, other through service.&lt;/li&gt;
      &lt;li&gt;use value object to handle user session, due to operation very like model CRUD, so use value, and base is redis hash&lt;/li&gt;
      &lt;li&gt;exception only on controller raise, service use active model save error message, when return false, we could get error message from service and raise with exception class&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;** Learn **&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;feature driven coding
        &lt;ul&gt;
          &lt;li&gt;every commit with small main part of the feature&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;service with callback&lt;/li&gt;
      &lt;li&gt;exceptio class&lt;/li&gt;
      &lt;li&gt;every concerns only focus one thing&lt;/li&gt;
      &lt;li&gt;RSpec from base stack&lt;/li&gt;
      &lt;li&gt;how to use service to architecture base of whole application&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 07 Aug 2016 08:00:00 +0800</pubDate>
        <link>/2016/08/07/1/</link>
        <guid isPermaLink="true">/2016/08/07/1/</guid>
        
        <category>weekly</category>
        
        
      </item>
    
      <item>
        <title>Welcome to mylake</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;“Yeah It’s on. ”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;foreword&quot;&gt;Foreword&lt;/h2&gt;

&lt;p&gt;Start to write something..&lt;/p&gt;

&lt;h2 id=&quot;text&quot;&gt;Text&lt;/h2&gt;

&lt;p&gt;I clone this template from git@github.com:Huxpro/huxblog-boilerplate.git&lt;/p&gt;
</description>
        <pubDate>Sat, 30 Jul 2016 20:00:00 +0800</pubDate>
        <link>/2016/07/30/hello-2016/</link>
        <guid isPermaLink="true">/2016/07/30/hello-2016/</guid>
        
        <category>life</category>
        
        
      </item>
    
  </channel>
</rss>
