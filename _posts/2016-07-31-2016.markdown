---
layout:     post
title:      "1"
subtitle:   "weekly learning"
date:       2016-07-30 12:00:00
author:     "ilake"
header-img: "img/post-bg-weekly.jpg"
tags:
    - weekly
---
> “strive”

## Use
* <p>[Gem] <a href="https://github.com/vcr/vcr">vcr</a></p>
  1. For test, it could record real third party response to yml file
  2. Use it with webmock's body

* <p>[Gem] <a href="https://github.com/bblimke/webmock">webmock</a></p>

* <p>[Gem] <a href="https://github.com/bbatsov/rubocop">rubocop</a></p>
  1. rubocop --auto-correct

* <p>[Gem] <a href="https://github.com/bblimke/webmock">webmock</a></p>
  1. If you use multiple sidekiq processes then you can specify limits per process

* <p>[Gem] <a href="https://github.com/laserlemon/figaro">figaro</a></p>
  1. Figaro was written to make it easy to securely configure Rails applications.

* <p>[Gem] <a href="https://github.com/swipely/docker-api">docker-api</a></p>

* <p>[Gem] <a href="https://github.com/makandra/active_type">active_type</a></p>
  1. ActiveType is our take on "presenter models" (or "form models") in Rails. We want to have controllers (and forms) talk to models that are either not backed by a database table

* <p>[Gem] <a href="https://github.com/rogercampos/png_quantizator/blob/master/lib/png_quantizator.rb">png_quantizator</a></p>
  1. PngQuantizator is a little wrapper around pngquant

## Read

* <p>[Ruby] <a href="https://twin.github.io/partial-downloads-with-enumerators-and-fibers/">Partial Downloads with Enumerators and Fibers</a></p>
  1. before download, need to verify MIME type
  2. use Enumerators and Fiber to execute streaming downlaod

* <p>[Ruby] <a href="http://rubyonrails.org/doctrine/">Ruby on Rails 基本主義en</a></p>
  1. <a href="https://medium.com/@juanitofatas/ruby-on-rails-%E5%9F%BA%E6%9C%AC%E4%B8%BB%E7%BE%A9-f4cde39292a4#.niv2du20a">Ruby on Rails 基本主義 chinese</a>

* <p>[Ruby] <a href="http://rosenfeld.herokuapp.com/en/articles/ruby-rails/2016-07-18-a-review-of-code-reloaders-for-ruby">A Review of Code Reloaders for Ruby</a></p>
  1. Different Code Reloaders

* <p>[Ruby] <a href="https://medium.com/@Sudhagar/rbenv-how-it-works-e5a0e4fa6e76#.jw3xeqqn9">Rbenv — How it works</a></p>

* <p>[Ruby] <a href="https://infinum.co/the-capsized-eight/articles/hiding-secrets-in-vault">Hiding secrets in a Vault</a></p>
  1. Using Vault, Github authentication and 'secrets' gem to make secret files more secure.

* <p>[Ruby] <a href="https://blog.blockscore.com/new-features-in-ruby-2-4/">New Features in Ruby 2.4</a></p>

* <p>[Ruby] <a href="https://www.sitepoint.com/automate-docker-with-the-remote-api-and-ruby/">Automate Docker with the Remote API and Ruby</a></p>

* <p>[Ruby] <a href="http://blog.arkency.com/2016/07/respond-to-format-is-useful-even-without-multiple-formats/">respond_to |format| is useful even without multiple formats</a></p>
  1. benefit of respond_to

* <p>[Ruby] <a href="http://aspiringwebdev.com/consider-turbolinks-5-for-your-next-rails-project/">CONSIDER TURBOLINKS 5 FOR YOUR NEXT RAILS PROJECT</a></p>
  1. Turbolinks 5 is a library for web applications that makes pages load faster

* <p>[Rspec] <a href="https://www.relishapp.com/rspec/rspec-core/docs/metadata/described-class">rspec described_class</a></p>
  1. If the first argument to the outermost example group is a class, the class is
  exposed to each example via the described_class() method

* <p>[Ruby] <a href="http://apidock.com/rails/ActiveSupport/Callbacks/run_callbacks">run_callbacks</a></p>

* <p>[Ruby] <a href="http://www.justinweiss.com/articles/the-lesser-known-features-in-rails-4-dot-2/">http://www.justinweiss.com/articles/the-lesser-known-features-in-rails-4-dot-2/</a></p>
  1. Easily load config files => Rails.application.config_for('yml file name')

* <p>[Ruby] <a href="https://speakerdeck.com/a_matsuda/the-recipe-for-the-worlds-largest-rails-monolith">The Recipe for the World's Largest Rails Monolith</a></p>
  1. Many handmade tools

* <p>[Ruby] <a href="https://ruby-china.org/topics/9271">RSpec 中let 和subject 的區別是什麼？</a></p>
  1. 主要語意的差別, subject主角, let配角

## Book
* <p> <a href="http://www.books.com.tw/products/CN11096287">設計模式之禪 第2版</a></p>
  on page 286

* <p> <a href="http://designpatternsinruby.com/">Design Patterns in Ruby</a></p>
   on page 172

## Work design

### API Architecture

#### Design

  1. **client auth**: follow aws, use current timestamp + private key as checksum, server need to verify checksum, also need to make sure timestamp in some duration (like 10 mins)
  2. **user auth**: logined user will have one or more token. use token as key, value is user id, and set expired time on every token, save them on redis, so when client send token, server could know the current user.
  3. **error handler**:
     - one config, record key, status code of error, error message use key for i18n.
     - every api action has its service object, when render api error will raise specific exception class and error key,this exception will rescue from base controller, and according error key to error render. All the data format will be the same, the different are message, key, status code

-- learned from MarsZ

#### Implement

  1. controller only handle flow, other through service.
  2. use value object to handle user session, due to operation very like model CRUD, so use value, and base is redis hash
  3. exception only on controller raise, service use active model save error message, when return false, we could get error message from service and raise with exception class

-- **learn point**

  1. feature driven coding
    - every commit with small main part of the feature
  2. service with callback
  3. exceptio class
  4. every concerns only focus one thing
  5. RSpec from base stack
  6. how to use service to architecture base of whole application
