---
layout:     post
title:      "20"
subtitle:   "weekly learning"
date:       2017-01-07 00:00:00
author:     "ilake"
header-img: "img/post-bg-weekly.jpg"
tags:
    - weekly
---
> “strive 12/18 ~ 1/07”

## Use

## Read

* <p>[web] <a href="http://m.leiphone.com/news/201606/UEiart497WUzS62u.html">我們真的需要網頁版App嗎？Google PWA的困局</a></p>
  * Web最重要的意義在於Open（開放）與Decentralized （去中心化）
  * 缺點：門檻不低, 瀏覽器支持, 用戶習慣
  * 優點: web 特性 優雅降級、漸進增強

* <p>[redux] <a href="https://medium.com/@WendellLiu/%E9%80%81%E8%AE%93%E4%BD%A0%E7%9A%84action%E8%83%BD%E4%BD%9C%E6%9B%B4%E5%A4%9A-redux-thunk-c07bc5488e48#.998ddxmo7">讓你的Action能作更多 — Redux-Thunk</a></p>
  * thunk就是一個function的內部會去呼叫另一個function，也就是再包裝的概念 => 裡面再dispatch一次 可以解決非同步的問題
  * Thunk是一個以action為本的包裹器

* <p>[redux] <a href="http://div.io/topic/1309">深入到源碼：解讀redux的設計思路與用法</a></p>

* <p>[redux] <a href="https://medium.com/@WendellLiu/redux-middleware%E5%A4%A7%E7%95%A5%E6%9E%B6%E6%A7%8B-ace7e646c929#.q59hfudfr">Redux Middleware大略架構</a></p>
  * 以包裹的方式，改變原生dispatch的行為

* <p>[redux] <a href="http://taobaofed.org/blog/2016/08/18/react-redux-connect/">React 實踐心得：react-redux 之connect 方法詳解</a></p>

* <p>[redux] <a href="http://www.cnblogs.com/hhhyaaon/p/5863408.html">react-redux原理分析</a></p>

* <p>[react] <a href="https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0#.gn3nd3wwl">Presentational and Container Components</a></p>
  * presentational components tend to be stateless pure functions
  * containers tend to be stateful pure classes

## Book

* <p>[redux] <a href="https://chentsulin.github.io/redux/index.html">Redux</a></p>

## Video

## Learn
